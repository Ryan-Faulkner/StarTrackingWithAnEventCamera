/*
 * AESocketOkCancelDialog.java
 *
 * Created on July 22, 2007, 1:17 PM
 */

package net.sf.jaer.eventio;

/**
A dialog for opening AESocket connections. Includes host:port, buffer size, and socket option settings.
@author  tobi
 */
public class AESocketOkCancelDialog extends javax.swing.JDialog {

    /** A return status code - returned if Cancel button has been pressed */
    public static final int RET_CANCEL = 0;
    /** A return status code - returned if OK button has been pressed */
    public static final int RET_OK = 1;

    AESocket aeSocket;

    /** Creates new form AESocketOkCancelDialog */
    public AESocketOkCancelDialog(java.awt.Frame parent, boolean modal, AESocket aeSocket) {
        super(parent,"AESocket Dialog", modal);
        initComponents();
        this.aeSocket = aeSocket;
        bufferSizeTextField.setText(Integer.toString(aeSocket.getBufferedStreamSize()));
        sendBufferSizeTextField.setText(Integer.toString(aeSocket.getSendBufferSize()));
        receiveBufferSizeTextField.setText(Integer.toString(aeSocket.getReceiveBufferSize()));
        hostnameTextField.setText(AESocket.getLastHost());
        portTextField.setText(Integer.toString(aeSocket.getPort()));
        useBufferedStreamsCheckBox.setSelected(aeSocket.isUseBufferedStreams());
        flushPacketsCheckBox.setSelected(aeSocket.isFlushPackets());
        getRootPane().setDefaultButton(okButton);  // cryptic
    }

    /** @return the return status of this dialog - one of RET_OK or RET_CANCEL */
    public int getReturnStatus() {
        return returnStatus;
    }

    /** This method is called from within the constructor to
    initialize the form.
    WARNING: Do NOT modify this code. The content of this method is
    always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        hostnameTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        bufferSizeTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        sendBufferSizeTextField = new javax.swing.JTextField();
        receiveBufferSizeTextField = new javax.swing.JTextField();
        defaultsButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        portTextField = new javax.swing.JTextField();
        useBufferedStreamsCheckBox = new javax.swing.JCheckBox();
        flushPacketsCheckBox = new javax.swing.JCheckBox();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        okButton.setMnemonic('o');
        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        jLabel1.setText("Hostname e.g. localhost");

        hostnameTextField.setText("localhost");
        hostnameTextField.setToolTipText("host from which to recieve events");

        jLabel2.setText("Buffered stream  size (bytes)");

        bufferSizeTextField.setToolTipText("size of buffered stream enclosing socket (increase to reduce context switching)");

        jLabel3.setText("Send buffer size (bytes)");

        jLabel4.setText("Receive buffer size (bytes)");

        sendBufferSizeTextField.setToolTipText("size of buffer for transmission (not used)");

        receiveBufferSizeTextField.setToolTipText("size of socket buffer for reception");

        defaultsButton.setMnemonic('d');
        defaultsButton.setText("Defaults");
        defaultsButton.setDefaultCapable(false);
        defaultsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultsButtonActionPerformed(evt);
            }
        });

        jLabel5.setText("Port (default "+AENetworkInterfaceConstants.STREAM_PORT+")");

        portTextField.setToolTipText("port number on host");
        portTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portTextFieldActionPerformed(evt);
            }
        });

        useBufferedStreamsCheckBox.setText("Use buffered streams");
        useBufferedStreamsCheckBox.setToolTipText("Enabled to use BufferedInputStream and BufferedOutputStream on the socket");
        useBufferedStreamsCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        useBufferedStreamsCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        useBufferedStreamsCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useBufferedStreamsCheckBoxActionPerformed(evt);
            }
        });

        flushPacketsCheckBox.setText("Flush packets");
        flushPacketsCheckBox.setToolTipText("Enable to flush on each writePacket");
        flushPacketsCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        flushPacketsCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(defaultsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 164, Short.MAX_VALUE)
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton))
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(hostnameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(receiveBufferSizeTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(portTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(sendBufferSizeTextField, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(bufferSizeTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 104, Short.MAX_VALUE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING)))
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(flushPacketsCheckBox)
                            .addComponent(useBufferedStreamsCheckBox))))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, okButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hostnameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(bufferSizeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(useBufferedStreamsCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(sendBufferSizeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(flushPacketsCheckBox))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(receiveBufferSizeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton)
                    .addComponent(defaultsButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void useBufferedStreamsCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useBufferedStreamsCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_useBufferedStreamsCheckBoxActionPerformed

private void defaultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultsButtonActionPerformed
      hostnameTextField.setText("localhost");
      portTextField.setText(Integer.toString(AENetworkInterfaceConstants.STREAM_PORT));
      bufferSizeTextField.setText(Integer.toString(AESocket.DEFAULT_BUFFERED_STREAM_SIZE_BYTES));
      sendBufferSizeTextField.setText(Integer.toString(AESocket.DEFAULT_SEND_BUFFER_SIZE_BYTES));
      receiveBufferSizeTextField.setText(Integer.toString(AESocket.DEFAULT_RECEIVE_BUFFER_SIZE_BYTES));
}//GEN-LAST:event_defaultsButtonActionPerformed

    private void portTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portTextFieldActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_portTextFieldActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        int sendBufferSize=AESocket.DEFAULT_SEND_BUFFER_SIZE_BYTES;
        int receiveBufferSize=AESocket.DEFAULT_RECEIVE_BUFFER_SIZE_BYTES;
        int bufferedStreamSize=AESocket.DEFAULT_BUFFERED_STREAM_SIZE_BYTES;
        int port=aeSocket.getPort();
        if (hostnameTextField.getText() == null) {
            hostnameTextField.selectAll();
            return;
        }
        String hostname=hostnameTextField.getText();
        try {
            port = Integer.parseInt(portTextField.getText());
        } catch (NumberFormatException e) {
            portTextField.selectAll();
            return;
        }
        try {
            sendBufferSize = Integer.parseInt(sendBufferSizeTextField.getText());
        } catch (NumberFormatException e) {
            sendBufferSizeTextField.selectAll();
            return;
        }
        try {
            receiveBufferSize = Integer.parseInt(receiveBufferSizeTextField.getText());
        } catch (NumberFormatException e) {
            receiveBufferSizeTextField.selectAll();
            return;
        }
        try {
            bufferedStreamSize = Integer.parseInt(bufferSizeTextField.getText());
        } catch (NumberFormatException e) {
            bufferSizeTextField.selectAll();
            return;
        }
        aeSocket.setHost(hostname);
        aeSocket.setPort(port);
        aeSocket.setBufferedStreamSize(bufferedStreamSize);
        aeSocket.setReceiveBufferSize(receiveBufferSize);
        aeSocket.setSendBufferSize(sendBufferSize);
        aeSocket.setUseBufferedStreams(useBufferedStreamsCheckBox.isSelected());
        aeSocket.setFlushPackets(flushPacketsCheckBox.isSelected());

        doClose(RET_OK);
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        doClose(RET_CANCEL);
    }//GEN-LAST:event_cancelButtonActionPerformed

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog

    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField bufferSizeTextField;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton defaultsButton;
    private javax.swing.JCheckBox flushPacketsCheckBox;
    private javax.swing.JTextField hostnameTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JButton okButton;
    private javax.swing.JTextField portTextField;
    private javax.swing.JTextField receiveBufferSizeTextField;
    private javax.swing.JTextField sendBufferSizeTextField;
    private javax.swing.JCheckBox useBufferedStreamsCheckBox;
    // End of variables declaration//GEN-END:variables
    private int returnStatus = RET_CANCEL;
}
