/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CameraMapperDialog.java
 *
 * Created on Jun 19, 2010, 1:59:16 PM
 */
package ch.unizh.ini.jaer.projects.einsteintunnel.multicamera;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.net.InetSocketAddress;
import java.util.Map;

import javax.swing.JTable;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.AbstractTableModel;

/**
 *  Allows mapping from IP:port to location in camera array.
 * 
 * @author tobi
 */
public class CameraMapperDialog extends javax.swing.JDialog implements PropertyChangeListener{

    /** A return status code - returned if Cancel button has been pressed */
    public static final int RET_CANCEL = 0;
    /** A return status code - returned if OK button has been pressed */
    public static final int RET_OK = 1;
    private MultiUDPNetworkDVS128Camera camera = null;
    private MappingTableModel tableModel = null;

    /** Creates new form CameraMapperDialog */
    public CameraMapperDialog(java.awt.Frame parent, boolean modal, MultiUDPNetworkDVS128Camera camera) {
        super(parent, modal);
        this.camera = camera;
        initComponents();
        tableModel = new MappingTableModel();
        mappingTable.setModel(tableModel);
        mappingTable.getColumnModel().getColumn(0).setPreferredWidth(30);
        mappingTable.getColumnModel().getColumn(1).setPreferredWidth(100);
        if(camera!=null && camera.getCameraMap()!=null){
            camera.getCameraMap().addPropertyChangeListener(this);
        }
        refreshTable();
//        SelectionListener listener = new SelectionListener(mappingTable);
//        mappingTable.getSelectionModel().addListSelectionListener(listener);
//        mappingTable.getColumnModel().getSelectionModel().addListSelectionListener(listener);
//        setChangeButtonsEnabled(false);
    }

    /** @return the return status of this dialog - one of RET_OK or RET_CANCEL */
    public int getReturnStatus() {
        return returnStatus;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        okButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        mappingTable = new javax.swing.JTable();
        moveUpButton = new javax.swing.JButton();
        moveDownButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        applyButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();

        setTitle("CameraMapper");
        setName("CameraMapper"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        okButton.setText("Save preferences and dismiss");
        okButton.setToolTipText("Closes dialog and saves changes to Preferences");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        mappingTable.setAutoCreateRowSorter(true);
        mappingTable.setModel(mappingTable.getModel());
        mappingTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(mappingTable);

        moveUpButton.setText("Move up");
        moveUpButton.setToolTipText("Moves camera up in list (decrements position)");
        moveUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveUpButtonActionPerformed(evt);
            }
        });

        moveDownButton.setText("Move down");
        moveDownButton.setToolTipText("Moves camera down in list (increments position)");
        moveDownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveDownButtonActionPerformed(evt);
            }
        });

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        applyButton.setText("Close");
        applyButton.setToolTipText("Closes dialog");
        applyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyButtonActionPerformed(evt);
            }
        });

        resetButton.setText("Reset");
        resetButton.setToolTipText("Resets the Map");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 582, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(okButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(applyButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resetButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(moveUpButton)
                    .addComponent(moveDownButton)
                    .addComponent(deleteButton))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(applyButton)
                            .addComponent(okButton)
                            .addComponent(resetButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(moveUpButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(moveDownButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteButton)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        camera.saveClientMappingPrefs();
        doClose(RET_OK);
    }//GEN-LAST:event_okButtonActionPerformed

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(RET_CANCEL);
    }//GEN-LAST:event_closeDialog

    // moves camera up in list, to smaller position
    private void moveUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveUpButtonActionPerformed
        int sel = mappingTable.getSelectedRow();
        if (sel < 1) {
            return;
        }
        camera.getCameraMap().decrementCameraPosition(sel);
        mappingTable.setRowSelectionInterval(sel - 1, sel - 1);
    }//GEN-LAST:event_moveUpButtonActionPerformed

    private void applyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyButtonActionPerformed
        doClose(RET_OK);        // TODO add your handling code here:
    }//GEN-LAST:event_applyButtonActionPerformed

    // moves camera down in list, to larger position
    private void moveDownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveDownButtonActionPerformed
        int sel = mappingTable.getSelectedRow();
        if (sel >= camera.getCameraMap().size() - 1) {
            return;
        }
        camera.getCameraMap().incrementCameraPosition(sel);
        mappingTable.setRowSelectionInterval(sel + 1, sel + 1);

    }//GEN-LAST:event_moveDownButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int sel = mappingTable.getSelectedRow();
        if (sel < 0) {
            return;
        }
        camera.getCameraMap().deleteCameraAtPosition(sel);
    }//GEN-LAST:event_deleteButtonActionPerformed

	private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
		camera.getCameraMap().clear();
	}//GEN-LAST:event_resetButtonActionPerformed

    private void doClose(int retStatus) {
        returnStatus = retStatus;
        setVisible(false);
        dispose();
    }

    /** Refreshes displayed table. */
    private void refreshTable() {
        if(tableModel!=null) tableModel.fireTableDataChanged();
    }

    /**
     * @return the tableModel
     */
    public MappingTableModel getTableModel() {
        return tableModel;
    }

    public void propertyChange(PropertyChangeEvent evt) {
        if(evt.getSource() instanceof CameraMap && evt.getPropertyName()==CameraMap.MAP_CHANGED){
            refreshTable();
        }
    }

    /** The table model for the table of mappings from InetSocketAddress to camera position.
     *
     */
    private class MappingTableModel extends AbstractTableModel {

        public MappingTableModel() {
        }

        @Override
        public int getRowCount() {
            return camera == null ? 10 : camera.getCameraMap().size();
        }

        @Override
        public int getColumnCount() {
            return 2;
        }

        @Override
        public String getColumnName(int column) {
            switch (column) {
                case 1:
                    return "InetSocketAddress";
                case 0:
                    return "Position";
                default:
                    return null;
            }
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            // the n'th row should return the InetSocketAddress for the n'th camera
            if (camera == null || camera.getCameraMap() == null) {
                return null;
            }
            CameraMap map = camera.getCameraMap();
            Map posMap = map.getPositionMap();
            if (columnIndex > 1 || rowIndex > map.size()) {
                return null;
            }
            switch (columnIndex) {
                case 1:
                    return posMap.get(rowIndex);
                case 0:
                    return rowIndex;
                default:
                    return null;
            }
        }

        @Override
        public Class<?> getColumnClass(int columnIndex) {
            switch (columnIndex) {
                case 1:
                    return InetSocketAddress.class;
                case 0:
                    return Integer.class;
                default:
                    return null;
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton applyButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable mappingTable;
    private javax.swing.JButton moveDownButton;
    private javax.swing.JButton moveUpButton;
    private javax.swing.JButton okButton;
    private javax.swing.JButton resetButton;
    // End of variables declaration//GEN-END:variables
    private int returnStatus = RET_CANCEL;

    private void setChangeButtonsEnabled(boolean b) {
        moveDownButton.setEnabled(b);
        moveUpButton.setEnabled(b);
        deleteButton.setEnabled(b);
    }

    public class SelectionListener implements ListSelectionListener {

        JTable table;

        // It is necessary to keep the table since it is not possible
        // to determine the table from the event's source
        SelectionListener(JTable table) {
            this.table = table;
        }

        public void valueChanged(ListSelectionEvent e) {
            // If cell selection is enabled, both row and column change events are fired
            if (e.getSource() == table.getSelectionModel()
                    && table.getRowSelectionAllowed()) {
                // Row selection changed
                int first = e.getFirstIndex();
                int last = e.getLastIndex();
                if (first < 0 && last < 0) {
                    setChangeButtonsEnabled(false);
                } else {
                    setChangeButtonsEnabled(true);
                }
            } else if (e.getSource() == table.getColumnModel().getSelectionModel()
                    && table.getColumnSelectionAllowed()) {
                // Column selection changed
                int first = e.getFirstIndex();
                int last = e.getLastIndex();
            }

            if (e.getValueIsAdjusting()) {
                // The mouse button has not yet been released
            }
        }
    }
}
